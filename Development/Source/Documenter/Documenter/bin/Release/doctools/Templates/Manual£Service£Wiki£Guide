<h2>Installation Guide</h2>

<h3>BTScheduledUploader</h3>

<p>We have created our own scheduled uploader to pair with BizTalk Documenter&nbsp;with the eloquent&nbsp;name&nbsp;BTScheduledUploader. The source code for the uploader is contained in the same source as this site and the documenter project. To set up the scheduled uploader on your environment you need to build the ScheduledUploader solution in release mode and copy the contents of the bin/Release folder to a folder on your machine. When setting this up for our environments we used&nbsp;<em>C:\Program Files (x86)\BTScheduledUploader</em>.&nbsp;</p>

<p>After you&#39;ve copied the files to your environment you need to add the exe as a scheduled task in windows Task Manager. This process is detailed <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">here</a>. You don&#39;t need any special settings except a trigger of your choice.&nbsp;</p>

<h4>What does it do?</h4>

<p>When the program runs it starts&nbsp;BizTalk Documenter on the server and waits for it to finish. It then uploads the created file to the blob which is configured in your App.config in the ScheduledUploader&nbsp;project, see this <a href="https://tpdoc.azurewebsites.net/Wiki/Edit/Manual£Service£#Configuration">page</a>&nbsp;for information of how this App.config is&nbsp;configured. This configuration is global for all facets of this Wiki and is something you should familiarize yourself with regardless.&nbsp;</p>

<h4>It failed! What now?</h4>

<p>If it fails the software is configured to upload the error message to the same blob as the BTDocumenter file. The name of this file should be something like &quot;Log&pound;&nbsp;+ (BTDocumenter default name). If you use storage explorer you should find it by searching for Log.</p>

<h3>SandCastle</h3>

<p>The documentation framework scans the source folders of the solution in search of SandCastle documentation to use as the documentation for the plain C# code in you solution.</p>

<h4>Setting up Sandcastle</h4>

<p>The first step to using the framework is usually installing SandCastle, you can skip this installation if you have no C# code in your project, but seeing as that is highly unlikely we will start with the installation of this crucial part of software.</p>

<p><strong>Step 1: Software</strong></p>

<p>The First thing you should do is to download the installation file for the SandCastle-framework and tools from <a href="https://github.com/EWSoftware/SHFB/releases" target="_blank">here</a>. This site also provides you with all information needed to preform the installation successfully.</p>

<p><strong>Step 2: Add the Sandcastle project</strong></p>

<p>When sandcastle is installed you should open the solution you want to document in Visual Studio and open the dialogue to add a new project as seen below.</p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£sandcastle_create£png" width="800px" /></p>

<p>Scroll down to the <em>Documentation</em> section outside the <em>Visual C#</em> tab and choose the <em>Sandcastle Help File Builder Project</em> option and press <em>OK</em>. It&#39;s <strong>extremely</strong> important to name the project after the solution with the appended .Doc suffix like so:</p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£Sandcastle_projectname£png" width="500px" /></p>

<p><strong>Step 3: Add references</strong></p>

<p>After adding the SandCastle project with the right naming convention you should add references to all your projects containing C# code to the SandCastle-project references. To add a reference to SandCastle you firstly right click the <em>Documentation Sources</em> folder and navigate to the <em>.csproj</em> file of the project you want to document.</p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£sandcastle_documentationsources£png" width="500px" /></p>

<p>Click OK to add the SandCastle reference. The next step is to add a reference to the project inside the <em>References</em> folder in Visual Studio. This is the standard Add References dialog that VS usually displays. Add the relevant project and click OK.</p>

<p><strong>Step 4: Generate XML</strong></p>

<p>SandCastle uses XML documentation generated by Visual Studio to generate it&#39;s HTML. Before you can document anything you therefore need to specify to VS that you want to generate this XML. You need to do this on all the projects you referenced in the previous step.</p>

<p>To make VS do this is pretty simple: just right click on the project and select properties. In the properties window click the <em>Build</em> tab and check the box named <em>XML documentation file</em></p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£sandcastle_xml£png" width="1200px" /></p>

<p>The default folder and file-name should be fine to use. I&#39;m not sure if you can edit it though, so be wary!</p>

<p><strong>Step 5: Specify documentation type</strong></p>

<p>To actually generate the documentation you need to build the SandCastle project, but before you start the build you need to specify the type of documentation you want to generate. To do this you need to right click the SandCastle project and select the <em>Properties</em> tab.</p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£sandcastle_selecttype£png" width="1200px" /></p>

<p>It&#39;s very important to select the <em>Website (HTML/ASP.NET)</em> option here. The framework auto-upload expects to encounter this format and if you choose something else it <strong>will not work</strong>.</p>

<p>This is essentially it for installing and building the SandCastle documentation if you want to stick with the standard setup. You can however also customize your SandCastle documentation to you hearts content and most of that will not be covered here, we will cover a few simple steps in the next section and if you want to go further <a href="https://www.simple-talk.com/dotnet/.net-tools/taming-sandcastle-a-.net-programmers-guide-to-documenting-your-code/" target="_blank">this</a> is a good place to start.</p>

<h4>Customizing your SandCastle Documentation</h4>

<p>You can probably just let your SandCastle doc stay in the default state if your not to fussy about the non code fluff, however you should change a few basic settings to make your documentation a bit more professional looking. These simple settings can be found in the ContentLayout.content file. Here you can change the first page display name of you project, set the revision number, add search indexes and add new pages among other more advanced features.</p>

<p><img src="/Images/UploadedImages/Image£Manual£Service£Wiki£Guide£sandcastle_customize£png" width="1200px" /></p>

<h3>Biztalk Server Documenter (BSD)</h3>

<p>The documentation framework scans for BSD documentation files in the Doctools folder of the CnasDocumenter project to use as documentation for your Orchestrations, Send- and Receive-ports, Pipelines and general integration information. It&#39;s essential that the <strong>BSD runs on the server that hosts the Biztalk Solution</strong> or the framework won&#39;t find anything to document.</p>

<h4>Setting up BSD</h4>

<p><strong>Step 1: Software</strong></p>

<p>The first step is just installing the software. Actually installing BSD is pretty easy. All you need to do is download the newest version from <a href="https://biztalk2013documenter.codeplex.com/releases" target="_blank">here</a> and follow the on-screen instructions.</p>

<p><strong>Step 2: Generate the .chm</strong></p>

<p>When the installation process is finished all you need to start documenting is to specify your output folder by clicking output and navigating to the folder you want the .chm file to be generated into. When this is done and you have your file you can open it and check that the content looks right.</p>

<p><strong>Step 3: Decompress the .chm</strong></p>

<p>Because the documentation-framework needs the raw HTML of the .chm file you need to extract the file, we&#39;ve had the most success using <a href="http://www.7-zip.org/" target="_blank">7zip</a>. Open the file in the program and extract it to the <em>Doctools</em> folder in the CnasDocumenter project. The CnasDocumenter will find the BSD documentation and will parse it into the wiki automatically when run</p>

<p>That&#39;s it for setting up BDS, and with that you should be good to go as far as getting your documentation automatically loaded. Now you just need to run the CnasDocumenter project!</p>
