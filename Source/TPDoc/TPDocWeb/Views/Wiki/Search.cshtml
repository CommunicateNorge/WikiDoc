@model List<Wiki.Models.SearchViewModel>
@using System.Text.RegularExpressions;
@{
    ViewBag.Title = "Search";
}

<h2>Search</h2>

<p id="searchPhraseText" hidden>@ViewBag.searchPhraseText</p>



@foreach (var item in Model)
{
    <div class="searchHit">
        <div>
            <span class="searchHeader">@Html.ActionLink(Wiki.Utilities.WikiBlob.SanitizeV2(item.pageKey), "Page", new { id = item.pageKey, position = item.position, searchText = Server.HtmlEncode(ViewBag.searchPhraseText) })</span>
        </div>
        <div class="phraseText">@item.phrase</div>
        <div class="italicText searchOccurences">
            <span>@item.lastModiefied - </span>
            @foreach (var occ in item.occurences)
            {
                <text>@occ.Key: @occ.Value </text>
            }
        </div>

    </div>
}

@section scripts {
    <script>
        $(document).ready(function ()
        {
            var text = $('#searchPhraseText').text();
            $('.searchHit').wrapInTag({
                tag: 'strong',
                words: text.split(" ")
            });
        });


        //Function to find a word and make it bold
        $.fn.wrapInTag = function (opts)
        {
            function getText(obj)
            {
                return obj.textContent ? obj.textContent : obj.innerText;
            }

            var tag = opts.tag || 'strong',
                words = opts.words || [],
                regex = RegExp(words.join('|'), 'gi'), //case insensitive
                replacement = '<' + tag + '>$&</' + tag + '>';

            $(this).contents().each(function () {
                if (this.nodeType === 3) //Node.TEXT_NODE
                {
                    $(this).replaceWith(getText(this).replace(regex, replacement));
                }
                else if (!opts.ignoreChildNodes) {
                    $(this).wrapInTag(opts);
                }
            });
        };
    </script>
}