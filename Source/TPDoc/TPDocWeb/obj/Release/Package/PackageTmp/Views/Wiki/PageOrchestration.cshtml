@model Dictionary<string, string>
@using Wiki.Utilities;
@{
    string linkToThis = @"/Wiki/Page/" + @Model["Manual_Blob_Adr"].Remove(@Model["Manual_Blob_Adr"].Length - 7);
    string phrase = (string)ViewBag.Phrase;
    string searchText = (string)ViewBag.searchText;
    string[] environments = Model["Environments"].SplitSimple("|");
    string primaryEnv = Model["PrimaryEnvironment"];
    string[] breadCrumbs = Model["Auto_Blob_Adr"].SplitSimple("£");
}

<section id="allContent" class="content">
    <p id="hiddenPhrase" hidden>@phrase</p>
    <p id="hiddenSearchText" hidden>@searchText</p>
    <p id="hiddenLinkText" hidden>@linkToThis</p>
    <p id="hiddenPageId" hidden>@Model["Auto_Blob_Adr"]</p>
    <section id="manualContentPage">
        @if (!String.IsNullOrEmpty(Model["autoContent"]) || User.CanEdit(Model["Manual_Blob_Adr"]))
        {
            <span class="smallEditText">@Html.ActionLink("[Edit]", "Edit", new { id = Model["Manual_Blob_Adr"] })</span>
            <span class="smallEditText">@Html.ActionLink("[History]", "History", new { id = Model["Manual_Blob_Adr"] })</span>
        }
        <span class="smallEditText"><a class="getLinkToThisPage">[Link]</a></span>
        <div class="displayLinkToThisPage"></div>

        @if (@Model.ContainsKey("pageNav"))
        {
            <div class="pageNavDiv">
                @Html.Raw(@Model["pageNav"])
            </div>
        }
        <section class="manualContent">
            @Html.Raw(Model["Manual_Content"])
        </section>
    </section>

    <nav class="navbar navbar-default autoNavDivider">
        <div class="container-fluid">
            <div class="navbar-header sectionDividerMenu">
                <p class="navbar-text">Auto-generated Content for Environment: </p>
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a class="dropdown-toggle" data-toggle="dropdown">
                            <span id="environmentHeader">@primaryEnv</span>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            @foreach (var item in environments)
                            {
                                <li><a class="environmentTarget">@item</a></li>
                            }
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <section id="generatedContentPage">
        @Html.Raw(Model["autoContent"])
    </section>
    <section id="generatedContentPage">
        @Html.Raw(Model["autoOverview"])
    </section>
    <section id="generatedContentPage">
        @Html.Raw(Model["autoCode"])
    </section>
</section>

@section scripts {

<script src="~/Scripts/PageFunctions.js"></script>
}

@section breadcrumb
{
    <li><a href="/Wiki">Index</a></li>
    @for (int i = 1; i < breadCrumbs.Length - 1; i++)
    {
        if (breadCrumbs[i].Length > 35)
        {
            <li><a href="@string.Concat("/Wiki/Page/Integration£", breadCrumbs[i])">@string.Concat(WikiBlob.SanitizeV2(breadCrumbs[i].Substring(0, 32)), "...")</a></li>
        }
        else
        {
            <li><a href="@string.Concat("/Wiki/Page/Integration£", breadCrumbs[i])">@WikiBlob.SanitizeV2(breadCrumbs[i])</a></li>
        }
    }
    @if (breadCrumbs[breadCrumbs.Length - 1].Length > 35)
    {
        <li class="active">@string.Concat(WikiBlob.SanitizeV2(breadCrumbs[breadCrumbs.Length - 1].Substring(0, 32)), "...")</li>
    }
    else
    {
        <li class="active">@(WikiBlob.SanitizeV2(breadCrumbs[breadCrumbs.Length - 1]))</li>
    }
    
}