@using Wiki.Utilities;

@{
    string cssPath = "";
    string bootPath = "";
    HttpCookie themeCookie = Request.Cookies["ThemeCookie"];

    if (themeCookie != null)
    {
        if(themeCookie.Value == "DefaultTheme")
        {
            cssPath = "DefaultTheme.css";
            bootPath = "bootstrap.min.css";
        }
        else 
        { 
            string[] tmp = themeCookie.Value.SplitSimple(",");
            cssPath = tmp[0] + ".css";
            bootPath = "bootstrap." + tmp[1] + ".min.css";
        }
    }
    else
    {
        cssPath = "DefaultTheme.css";
        bootPath = "bootstrap.min.css";
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='shortcut icon' href='/Content/Icons/info-icon.png' type='image/x-icon' />
    <title>TPDoc - @ViewBag.Title</title>
    <link id="bootTheme" href="~/Content/bootstrap/@bootPath" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link id="theme" href="~/Content/Themes/@cssPath" rel="stylesheet" />   

    @Scripts.Render("~/bundles/modernizr")
    @RenderSection("styles", required: false)
    @if (ViewBag.Page != null && ViewBag.Page.ToString().Contains("SandCastle£CSharp£"))
    {
        @* Used by SandCastle doc *@
        <link href="~/Content/branding.css" rel="stylesheet" />
    }
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/styles/default.min.css">
    <link href="~/Content/SqlStyle.css" rel="stylesheet" />
</head>

@{
    string ul = TPDocWeb.Controllers.WikiController.GetTextFromBlob("Link_Tree");
    string ul_Manual = TPDocWeb.Controllers.WikiController.GetTextFromBlob("Manual£Link_Tree");
}

<body>

    <section id="headerSection" class="jumbotron">
        <a href="@System.Configuration.ConfigurationManager.AppSettings["SiteTitleLink"]" target="_blank"><img id="bannerLogo" src="~/Content/logo.png" width="@System.Configuration.ConfigurationManager.AppSettings["logowidth"]" /></a>
        <div class="container">
            <h1 id="headerText">@Html.ActionLink(System.Configuration.ConfigurationManager.AppSettings["SiteTitle"], "Index")</h1>
        </div>
    </section>
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                @using (Html.BeginForm("Search", "Wiki", null, FormMethod.Post, new { @class = "navbar-form navbar-right", role = "search" }))
                {
                    <div class="form-group">
                        <input type="text" class="form-control" placeholder="Search..." name="searchValue" />
                    </div>
                    <input type="hidden" name="fromIndex" value="0" />
                    <input type="hidden" name="toIndex" value="50" />
                    <input type="submit" value="Search" class="btn btn-default navbar-btn" />
                }
            </div>
            <ol class="breadcrumb">
                @RenderSection("breadcrumb", required: false)
            </ol>
            <div class="navbar-collapse navbar-right collapse rightMenuBar">
                @if (User.CanEdit("Manual£Link_Tree"))
                {
                    <button type="button" class="btn btn-default rightMenuButton" data-toggle="modal" data-target="#myModal" onclick="bootstrapEditMenu.call(this)">Edit Menu</button>
                    <button type="button" class="btn btn-default rightMenuButton" id="newPageButton" data-toggle="modal" data-target="#newPageModal">New Page</button>
                    @Html.Partial("_LoginPartial")
                }
            </div>
        </div>
    </nav>
    <div id="mainContent">
        <section id="siteMap">
            <ul class="list-group">
                @Html.Raw(ul_Manual)
                @Html.Raw(ul)
            </ul>
        </section>

        <div class="container body-content">
            @RenderBody()
        </div>
    </div>
    <footer>
        <br />

        <hr />
        <p>@DateTime.Now.Year - Communicate Norge AS</p>
    </footer>

    <!-- Modal for editing main menu-->
    <div id="myModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Edit Main Menu</h4>
                </div>
                <div class="modal-body">
                    <div class="modalContentDiv">
                        @Html.Raw(ul_Manual)
                    </div>
                </div>
                <div class="modal-footer">
                    @*<button class="btn btn-default" onclick="location.href='@Url.Action("Edit", "Wiki", new { id = "Manual£Link_Tree" })'" type="button">Advanced Mode</button>*@
                    <button class="btn btn-success" onclick="saveMainMenu.call(this)" type="button">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>
    </div>

    <!-- Modal for new page -->
    <div id="newPageModal" class="modal fade" role="dialog">
        <div class="modal-dialog newPageModal">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">New page</h4>
                </div>
                <div class="modal-body">
                    <div class="modalContentDiv newPageModalContent">
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" onclick="CreateNewPage.call(this)" type="button">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.15.0/jquery.validate.min.js"></script>
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="~/Scripts/GlobalFunctions.js"></script>
    <script src="~/Scripts/draw_io.js"></script>
    <script>
        function CreateNewPage()
        {
            var pageName = $("#newPageNameBox").val();
            var levelOne = $("#modalLevelOne").find("option:selected").text();
            var levelTwo = $("#modalLevelTwo").find("option:selected").text();
            window.location.href = "/Wiki/Page/Manual£" + sanitize(levelOne) + "£" + sanitize(levelTwo) + "£" + sanitize(pageName);
        }

        function AddTextBoxToModal()
        {
            if (!$("#newPageNameBox").length)
                $(".newPageModalContent").append('<input type="text" id="newPageNameBox" placeholder="New Page Name" name="newSiteName">');
        }

        function GetSecondLevelForModal()
        {
            var selectedText = $(this).find("option:selected").text();
            var url = "@Url.Action("GetMenuLevels", "Wiki")";

            $.ajax({
                url: url + "/" + selectedText,
                type: 'GET',
                async: true,
                success: function (data) {
                    if (data == "failure")
                    {
                        alert("Something went wrong while sending the request to the API.");
                    }
                    else
                    {
                        if ($("#modalLevelTwo").length)
                            $("#modalLevelTwo").remove();
                        if ($("#newPageNameBox").length)
                            $("#newPageNameBox").remove();

                        $(".newPageModalContent").append(data);
                    }
                }

            });
            return true;
        }

        $("#newPageButton").click(function (event)
        {
            var url = "@Url.Action("GetMenuLevels", "Wiki")";
            $.ajax({
            url: url,
            type: 'GET',
            async: true,
            success: function (data) {
                if (data == "failure")
                {
                    alert("Something went wrong while sending the request to the API.");
                }
                else
                {
                    $(".newPageModalContent").html(data);
                }
            }

        });
        return true;
    });

    $('.list-group-item').on("change paste keyup", ".editableMenuItem", (function ()
    {
        $(this).attr('value', $(this).val());
    }));

    $('.list-group-item').on("change paste keyup", ".newMenuItemInput", (function () {
        $(this).attr('value', $(this).val());
    }));

    function saveMainMenu()
    {
        var text = $('.modalContentDiv').html();
        var url = "@Url.Action("SaveMainMenu", "Wiki")";

        text = encodeURIComponent(text);

        $.ajax({
            url: url,
            type: 'POST',
            data: '{ "text": "' + text + '"}',
            contentType: 'application/json',
            async: true,
            success: function (data)
            {
                if (data == "failure")
                {
                    alert("Something went wrong while sending the request to the API.");
                }
                else
                {
                    location.reload();
                }
            }

        });
        return false;
    }

    function deleteHeader()
    {
        $(this).parent().parent().remove();
    }

    var firstBoostrapMenu = true;
    var menuContent;

    function bootstrapEditMenu()
    {
        if (firstBoostrapMenu)
        {
            firstBoostrapMenu = false;
            menuContent = $('.modalContentDiv').html();
        }
        else
        {
            $('.modalContentDiv').empty();
            $('.modalContentDiv').html(menuContent);
        }

        $('.modalContentDiv .projectInternalLinks').each(function ()
        {
            $(this).addClass('editableUlItem');
        });

        $('.modalContentDiv .projectInternalLinks').each(function () {
            $(this).addClass('editableUlItem');
        });

        $('.modalContentDiv ul li:last-child').each(function ()
        {
            var mainHeader = $(this).parent().siblings('.mainHeader').text();
            $(this).after('<li><span class="glyphicon glyphicon-plus newMenuItemGlyph" aria-hidden="true"></span><div class="input-group"><input class="form-control newMenuItemInput" id="' + mainHeader + '" type="text" value=""></div></li>');
        });

        $('.modalContentDiv').goDeep(4, function (deep) // $.fn.goDeep(levels, callback)
        {
            if ($(this).is('a'))
            {
                if($(this).parent().attr("class") === "list-group-item")
                {
                    $(this).html('<div class="input-group"><input class="form-control editableMenuItem" type="text" value="' + $(this).text() + '" readonly></div>');
                }
                else
                {
                    $(this).html('<span class="glyphicon glyphicon-remove removeMenuItemGlyph" aria-hidden="true" onclick="deleteHeader.call(this)"></span><div class="input-group"><input class="form-control editableMenuItem" type="text" value="' + $(this).text() + '" readonly></div>');
                }
            }
            $(this).removeClass('linkHeader');
            $(this).removeClass('mainHeader');
            $(this).removeClass('projectInternalLinks');
            $(this).removeClass('manualLinkTree');
            $(this).removeAttr('id');
            $(this).removeAttr('href');
        });
    }

    $.fn.goDeep = function (levels, func) {
        var iterateChildren = function (current, levelsDeep) {
            func.call(current, levelsDeep);

            if (levelsDeep > 0)
                $.each(current.children(), function (index, element) {
                    iterateChildren($(element), levelsDeep - 1);
                });
        };

        return this.each(function ()
        {
            iterateChildren($(this), levels);
        });
    };
    </script>
</body>
</html>
