@model Dictionary<string, string>
@{
    ViewBag.Title = "Edit";
    string id = Model["Manual_Blob_Adr"];
    string lastPulledETag = Model["lastPulledETag"];

    string textAreaContent = Model["Manual_Content"];
}

<section class="editTextContent content">

    <fieldset id="guideField">
        <legend id="guideLegend">Guidelines +</legend>
        <div id="guideFieldContent">
            @Html.Raw(Model["Guidelines"])
        </div>
    </fieldset>
    <textarea id="editPageArea" cols="80" rows="20" name="content" wrap='off'>@textAreaContent</textarea>
    <input class="btn btn-success editButton" id="editButtonSave" onclick="SavePage.call(this)" type="submit" value="Save" />
    <p hidden id="eTag">@lastPulledETag</p>


    <div id="uploadImage">
        <fieldset>
            <legend>Upload Image</legend>
            <form id="submitImgFile">
                <input type="hidden" value="@id" name="sourceFile" />
                <p>
                    <span id="uploadImageInput" class="btn btn-primary btn-file">
                        Choose file <input type="file" name="file" accept="image/*">
                    </span>
                    <label id="fileChosen"></label>
                </p>
                <label for="imageWidth">Image width in pixels (typical screen is 1920px): </label>
                <input type="number" name="imageWidth" /> <br />
                <input type="hidden" name="pageId" value="@id"/> <br />
                <input class="btn btn-primary" type="submit" value="Upload" />
            </form>
            <div id="imageLinkField">
                <fieldset>
                    <legend>Image Link</legend>
                    <div id="imageUrl"></div>
                </fieldset>
            </div>
            <div id="imagePreview"></div>
        </fieldset>
    </div>

    <div id="uploadGenericFile">
        <fieldset>
            <legend>Upload File</legend>
            <form id="submitGenericFile">
                <p>
                    <span id="uploadGenericFileInput" class="btn btn-primary btn-file">
                        Choose file <input type="file" name="file" accept="*/*">
                    </span>
                    <label id="genericFileChosen"></label>
                </p>
                <input type="hidden" name="pageId" value="@id" /> <br />
                <input class="btn btn-primary" type="submit" value="Upload" />
            </form>
            <div id="genericFileLinkField">
                <fieldset>
                    <legend>File Link</legend>
                    <div id="genericFileUrl"></div>
                </fieldset>
            </div>
        </fieldset>
    </div>
</section>

@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>

    <script>
        CKEDITOR.replace('editPageArea'), { allowedContent: true };

        var editor;

        // The instanceReady event is fired when an instance of CKEditor has finished
        // its initialization.
        CKEDITOR.on('instanceReady', function (ev) {
            editor = ev.editor;

            // Show this "on" button.
            document.getElementById('readOnlyOn').style.display = '';

            // Event fired when the readOnly property changes.
            editor.on('readOnly', function () {
                document.getElementById('readOnlyOn').style.display = this.readOnly ? 'none' : '';
                document.getElementById('readOnlyOff').style.display = this.readOnly ? '' : 'none';
            });
        });

        function toggleReadOnly(isReadOnly)
        {
            // Change the read-only state of the editor.
            editor.setReadOnly(isReadOnly);
        }

        CKEDITOR.plugins.registered['save'] =
        {
            init: function (editor) {
                var command = editor.addCommand('save',
                   {
                       modes: { wysiwyg: 1, source: 1 },
                       exec: function (editor)
                       {
                           SavePage(savePageNoPostBack);
                       }
                   }
                );
                editor.ui.addButton('Save', { label: 'Save', command: 'save' });
            }
        }

        function savePageNoPostBack(data)
        {
            $("body").css("cursor", "default");
            $('#editPageArea').attr('readonly', '');
            $('#eTag').html(data.newEtag);
            toggleReadOnly(false);
        }

        function SavePage(callbackFunction)
        {
            var url = "@Url.Action("Edit", "Wiki", new { id = string.Empty })";

            if (typeof (callbackFunction) !== typeof (Function))
            {
                callbackFunction = redirectOnFormSubmit;
            }

            var content = CKEDITOR.instances.editPageArea.getData();
            var lastPulledETag =  $('#eTag').html();
            var id = "@id";

            var dataConverted = JSON.stringify({ content, lastPulledETag, id });

            $.ajax({
                url: url,
                type: 'POST',
                context: this,
                data: "id=" + encodeURIComponent(id) + "&lastPulledETag=" + encodeURIComponent(lastPulledETag) + "&content=" + encodeURIComponent(content),
                contentType: 'application/x-www-form-urlencoded',
                async: true,
                dataType:'json',
                success: callbackFunction,
                beforeSend: changetoWaitingCursor,
                error: handleAuthTimeout
            });
            return false;
        }

        $("#submitImgFile").submit(function () {

            var formData = new FormData($(this)[0]);

            $.ajax({
                url: "/Wiki/UploadImageToBlob",
                type: 'POST',
                data: formData,
                async: false,
                success: function (data)
                {
                    var myString = data;
                    var myRegexp = /src="(.*)"/g;
                    var match = myRegexp.exec(myString);

                    $("#imageUrl").text(match[1]).html();
                    $("#fileChosen").html("");
                    $("#imagePreview").html(data);

                },
                cache: false,
                contentType: false,
                processData: false
            });

            return false;
        });

        $("#submitGenericFile").submit(function () {

            var formData = new FormData($(this)[0]);
            var fileUploadUrl = "@Url.Action("UploadFileToBlob", "Wiki")";

            $.ajax({
                url: fileUploadUrl,
                type: 'POST',
                data: formData,
                async: false,
                success: function (data) {
                    $("#genericFileUrl").text(data);
                    $("#genericFileChosen").html("");
                },
                cache: false,
                contentType: false,
                processData: false
            });

            return false;
        });

        function changetoWaitingCursor()
        {
            toggleReadOnly(true);
            $("body").css("cursor", "progress");
        }

        function handleAuthTimeout()
        {
            alert("Authentication timed out. Please copy your content (ctrl+A), then reload the page and copy the content into it. Sorry for the inconvenience, we are working to upgrade this feature! :)");
            localStorage.textAreaContent = CKEDITOR.instances.editPageArea.getData();
            localStorage.textAreaContentTimeStamp = $.now();
            //location.reload();
        }

        $(document).ready(function ()
        {
            var cacheTime = new Date(localStorage.textAreaContentTimeStamp);
            var cacheTimeExpire = cacheTime.setHours(cacheTime.getMinutes() + 1);

            if (cacheTimeExpire < $.now())
            {
                if (localStorage.textAreaContent.length > 0)
                {
                    $("#editPageArea").val(localStorage.textAreaContent)
                    localStorage.removeItem("textAreaContent");
                    localStorage.removeItem("textAreaContentTimeStamp");
                }
            }
        });

        function redirectOnFormSubmit(data)
        {
            $("body").css("cursor", "default");
            if (data.status !== "failure") {
                window.location.href = '/Wiki/Page/' + data.decodedId;
            }
            else {
                alert("Someone edited the page ('O'/). Copy your changes and follow the edit link for this page again to see the new changes and merge.");
            }
        }

        //Query the user for image file to upload and put name on site for user to see
        $(document).on('change', '.btn-file :file', function ()
        {
            var input = $(this),
                numFiles = input.get(0).files ? input.get(0).files.length : 1,
                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
            var spanId = input.context.parentElement.id;

            $("#" + spanId).next().html(label);
        });

        //Expand the guidlines fieldset and change text to match visibility
        $("#guideField").click(function (event)
        {
            if ($("#guideFieldContent").is(":visible")) {
                $('#guideLegend').html('Guidelines +');
            }
            else {
                $('#guideLegend').html('Guidelines -');
            }
            $("#guideFieldContent").slideToggle("fast");
        });
    </script>
}