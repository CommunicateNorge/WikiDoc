using AzureStorage;
using AzureStorage.Table.Models;
using HtmlAgilityPack;
using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;
using SearchIndexer;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net.Mime;
using System.Runtime.Caching;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Helpers;
using System.Web.Hosting;
using System.Web.Mvc;
using Wiki.DAL;
using Wiki.Maintenance;
using Wiki.Models;
using Wiki.Utilities;

namespace TPDocWeb.Controllers
{
	/// <summary>
	/// Main controller for the wiki visualization of the project documentation. Uses files from azure storage blob to render the menu system and all manually and autogenerated content 
	/// within the documentation. Uses Azure TableStore to index pages for the search function. 
	/// </summary>
#if DEBUG
	// debug stuff goes here
#else
        [ErrorLogger]
        [AjaxAuthorize]
#endif
	public class WikiController : Controller
    {
        private static readonly ObjectCache WebApiCache = MemoryCache.Default;
        private static AzureBlobStorage azureStorage;
		private static DataAccess dal;
		private static String AuditTableName;
        private static Dictionary<string, AzureBlobStorage> environmentConnections = new Dictionary<string, AzureBlobStorage>();
        private HtmlGenerator generator = new HtmlGenerator();

		public const string MANUAL_INDEX_BLOB_ADR = "Manual£Index";
		public const string AUTOGEN_INDEX_NAME = "Overview_Integration";
		public const string MENU_LINK_TREE_MANUAL = "Manual£Link_Tree";
		public const string UPLOADED_IMAGES = "UploadedImages";

		/// <summary>
		/// Blob keys for template files
		/// </summary>
		private const string TEMPLATE_INTEGRATION = "Template£Integration";
        private const string TEMPLATE_ORCHESTRATION = "Template£Orchestration";
        private const string TEMPLATE_SERVICE = "Template£Service";
        private const string TEMPLATE_PROJECT = "Template£Project";
        private const string TEMPLATE_GENERAL = "Template£General";
        private const string TEMPLATE_DELIVERIES = "Template£Deliveries";
        private const string TEMPLATE_EXTERNAL = "Template£External";

        /// <summary>
        /// Blob key to the HTML file that represents the thumbnails on the index site
        /// </summary>
        private const string THUMBNAILS = "Manual£Index£Thumbnails";

        /// <summary>
        /// Blob key to the HTML file that represents the guidelines on the edit page
        /// </summary>
        private const string GUIDELINES = "Manual£Service£Wiki£Guidlines£Visual";
        private const int SNIPPET_SIZE = 200;

            /// <summary>
        /// Constructor. Initializes the connection to blobStore and tableStore.
        /// </summary>
        public WikiController()
        {
            if(azureStorage == null)
            {
                #if DEBUG
                    AzureStorageInfo azureInfo = AzureStorageInfo.WikiFilesPrimary;
                #else
                    AzureStorageInfo azureInfo = AzureStorageInfo.WikiFilesPrimary;
                #endif

                azureStorage = new AzureBlobStorage(azureInfo);

                int count = 1;
                while (ConfigurationManager.AppSettings.AllKeys.Contains("BTEnvironment" + count + "Container"))
                {
                    environmentConnections.Add(ConfigurationManager.AppSettings["BTEnvironment" + count + "Name"], new AzureBlobStorage(azureInfo, true, ConfigurationManager.AppSettings["BTEnvironment" + count + "Container"]));
                    count++;
                }
            }
            if (AuditTableName == null)
                AuditTableName = ConfigurationManager.AppSettings["PrimaryAzureStorageTableAudit"];

			dal = new DataAccess(azureStorage, AuditTableName);
		}

        /// <summary>
        /// Checks if a blob should be included on the list of last modified blobs created by <see cref="GetNewestPages"/>
        /// </summary>
        /// <param name="blobName">Name of the blob to check</param>
        /// <returns>Whether or not a blob should be included</returns>
        private static bool BlobFilterManualPagesOnly(string encodedBlobName)
        {
            return WikiBlob.IsManualPage(encodedBlobName, false, true);
        }

        [HttpGet]
        [Route("Wiki/GetMenuLevels/{prevLevels?}")]
        public string GetMenuLevels(string prevLevels = "")
        {
            List<string> menuTitles = new List<string>();
            HtmlDocument mainMenu = new HtmlDocument();
            mainMenu.LoadHtml(GetTextFromBlob("Manual£Link_Tree"));

            HtmlDocument mainMenuAuto = new HtmlDocument();
            mainMenuAuto.LoadHtml(GetTextFromBlob("Link_Tree"));

            if(prevLevels == "")
            {
                HtmlNodeCollection menuItems = mainMenu.DocumentNode.SelectNodes("//*[contains(@class,'linkHeader')]");

                for (int i = 0; i < menuItems.Count; i++)
                {
                    menuTitles.Add(menuItems.ElementAt(i).InnerText);
                }

                if(mainMenuAuto.DocumentNode.ChildNodes.Count > 0)
                {
                    HtmlNodeCollection autoMenuItems = mainMenuAuto.DocumentNode.SelectNodes("//*[contains(@class,'mainHeader')]");

                    for (int i = 0; i < autoMenuItems.Count; i++)
                    {
                        menuTitles.Add(autoMenuItems.ElementAt(i).InnerText);
                    }
                }

                return generator.CreateSelectList(menuTitles, "levelOne", "modalLevelOne", "GetSecondLevelForModal");
            }
            else
            {
                HtmlNodeCollection menuItems = mainMenu.DocumentNode.SelectNodes("//a[.='" + prevLevels + "']");
                HtmlNodeCollection autoMenuItems = mainMenuAuto.DocumentNode.SelectNodes("//a[.='" + prevLevels + "']");
                List<HtmlNode> temp = null;
                
                if(menuItems != null)
                    temp = menuItems.FirstOrDefault().NextSibling.NextSibling.ChildNodes.ToList();

                if (autoMenuItems != null)
                    temp = autoMenuItems.FirstOrDefault().NextSibling.NextSibling.ChildNodes.ToList();

                for (int i = 0; i < temp.Count; i++)
                {
                    if (temp.ElementAt(i).Name == "#text") 
                        temp.RemoveAt(i);                       
                }

                foreach (var item in temp)
                {
                    menuTitles.Add(item.ChildNodes.FirstOrDefault().InnerText);
                }

                return generator.CreateSelectList(menuTitles, "levelTwo", "modalLevelTwo", "AddTextBoxToModal");
            }
        }

		public ActionResult LinkReplace()
		{
			if (User.Identity.Name != "jonas.moltzau@communicate.no" && User.Identity.Name != "jonas.moltzau@rema.no" && User.Identity.Name != "martin.lokkeberg@rema.no")
				return RedirectToAction("Index");

			return View();
		}

		[Route("Wiki/StartLinkReplace/{oldId}/{newId}")]
		public async Task<string> StartLinkReplace(string oldId, string newId)
		{
			if (azureStorage.BlobExists(WikiBlob.Combine("Log", "LinkReplacer")))
				return "Someone has started this operation already, please wait for the operation to complete";

			HostingEnvironment.QueueBackgroundWorkItem(async cancellationToken =>
			{
				LinkReplacer replacer = new LinkReplacer(azureStorage, dal);
				var result = await replacer.Replace(oldId, newId, cancellationToken, User.Identity.Name, Request.UserHostAddress);
			});

			return "Done";
		}

		public string GetLinkReplacerLog()
		{
			CloudAppendBlob logBlob = null;
			try
			{
				logBlob = azureStorage.Container.GetAppendBlobReference(WikiBlob.Combine("Log", "LinkReplacer"));

				if (logBlob.Exists())
				{
					string logBlobContent = logBlob.DownloadText();

					if (string.IsNullOrEmpty(logBlobContent))
						return "Searching for links to replace...";
					else
						return Server.UrlEncode(logBlobContent);
				}
				else
				{
					return "not found";
				}
			}
			catch(Exception)
			{
				return "failure";
			}
		}

        /// <summary>
        /// Gets the newest pages on the wiki after last modified date and time.
        /// </summary>
        /// <param name="count">The count of how many new pages is returned in the table</param>
        /// <returns>HTML table containing the formatted results</returns>
        public string GetNewestPages(int count)
        {
            List<BlobUriAndModified> blobs = azureStorage.GetTopNLatestBlobs(count, new AzureBlobStorage.BlobFilter(BlobFilterManualPagesOnly));
            blobs.Sort();
            blobs.Reverse();
            return generator.CreateTableFromBlobList(blobs);
        }


        /// <summary>
        /// Gets all manually created pages from blob-store.
        /// </summary>
        /// <returns>View over all manually created pages.</returns>
        public ActionResult AllManualPages()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<ul>");
            foreach (var str in azureStorage.GetBlobList())
            {
                String decodedName = HttpUtility.UrlDecode(str);
                if (WikiBlob.IsManualPage(decodedName, false))
                {
                    sb.Append("<li>").Append(WikiBlob.GetAsWikiLink(str)).Append("</li>");
                }
            }
            sb.Append("</ul>");
            return View(sb);
        }
        
        /// <summary>
        /// Creates the search output-view. Uses the searchIndexer project to iterate over the index in table store and 
        /// returns the relevant matches as a list to the view.
        /// </summary>
        /// <param name="form">The inputted search value</param>
        /// <returns>Search output view</returns>
        [HttpPost]
        public ActionResult Search(FormCollection form)
        {
            string searchValue = form["searchValue"];

            //If search is empty, redirect to index
            if (String.IsNullOrWhiteSpace(searchValue))
                return RedirectToAction("Index");

            int fromIndex = 0;
            int toIndex = 0;

            if (!Int32.TryParse(form["fromIndex"], out fromIndex) || !Int32.TryParse(form["toIndex"], out toIndex))
                throw new ArgumentException("The range of search results could not be parsed");


            HttpCookie myCookie = Request.Cookies["SettingsCookie"];
            bool useQuickSearch = (myCookie != null && myCookie.Values.HasKeys() && myCookie.Values.Get("SearchSetting") == "Quick");

            SearchIndexer.Search ab = new SearchIndexer.Search(azureStorage);
            List<KeyValuePair<String, Result>> hits = ab.DoSearch(searchValue);
            Dictionary<string, SearchViewModel> hitsView = new Dictionary<string, SearchViewModel>();

            if (toIndex > hits.Count)
            {
                toIndex = hits.Count;
            }

            for (int i = fromIndex; i < hits.Count; i++)
            {
                string strippedKey = WikiBlob.GetBaseName(hits.ElementAt(i).Key);

                if (hitsView.ContainsKey(strippedKey))
                {
                    SearchViewModel baseModel = hitsView[strippedKey];
                    foreach (var itemAndCount in hits.ElementAt(i).Value.wordHits)
                    {
                        if (baseModel.occurences.ContainsKey(itemAndCount.Key))
                            baseModel.occurences[itemAndCount.Key] += itemAndCount.Value.Count;
                        else
                            baseModel.occurences.Add(itemAndCount.Key, itemAndCount.Value.Count);
                    }
                }
                else if(i < toIndex)
                {
                    Tuple<int, int, int> position = hits.ElementAt(i).Value.wordHits.FirstOrDefault().Value.FirstOrDefault();
                    Dictionary<string, int> occurences = new Dictionary<string, int>();

                    //Build occurences table
                    foreach (var itemAndCount in hits.ElementAt(i).Value.wordHits)
                    {
                        if (occurences.ContainsKey(itemAndCount.Key))
                            occurences[itemAndCount.Key] += itemAndCount.Value.Count;
                        else
                            occurences.Add(itemAndCount.Key, itemAndCount.Value.Count);
                    }
                    SearchViewModel newNode = null;
                    if (useQuickSearch)
                    {
                        newNode = new SearchViewModel()
                        {
                            occurences = occurences,
                            lastModiefied = "N/A",
                            pageKey = strippedKey,
                            phrase = "...",
                            position = position.Item1 + "£" + position.Item2 + "£" + position.Item3
                        };
                    }
                    else
                        newNode = AddNodeToHits(position, hits.ElementAt(i).Key, strippedKey, occurences);

                    if(newNode != null)
                        hitsView.Add(strippedKey, newNode);
                }
            }

            ViewBag.searchPhraseText = searchValue;
            List<SearchViewModel> onlyHits = hitsView.Values.ToList();
            onlyHits.Sort(new SortSearchViewModel(true));
            return View(onlyHits);
        }

        /// <summary>
        /// Helper method used by <see cref="Search"/> to add search hit to the ViewModel collection. Calculates the phrase to use as
        /// an anchor when redirecting to the page after a user clikc a hit. 
        /// </summary>
        /// <param name="position"></param>
        /// <param name="url"></param>
        /// <param name="linkUrl"></param>
        /// <param name="occurences"></param>
        /// <returns></returns>
        private SearchViewModel AddNodeToHits(Tuple<int,int,int> position, string url, string linkUrl, Dictionary<string, int> occurences)
        {
            string content = azureStorage.GetBlobContentAsString(url);
            HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(content);

            HtmlNode match = null;

            Parser.CheckNode(doc.DocumentNode, position.Item1, position.Item2, ref match);
            if (match != null)
            {
                int snippetStartIndex = Math.Max(position.Item3 - (SNIPPET_SIZE/2), 0);
                int snippetLength = Math.Min(SNIPPET_SIZE, match.InnerText.Length-snippetStartIndex);

                SearchViewModel hit = new SearchViewModel()
                {
                    occurences = occurences,
                    lastModiefied = azureStorage.GetBlobLastModified(url).GetValueOrDefault().ToString(new System.Globalization.CultureInfo("nb-NO")),
                    pageKey = linkUrl,
                    phrase = match.InnerText.Substring(snippetStartIndex, snippetLength),
                    position = position.Item1 + "£" + position.Item2 + "£" + position.Item3
                };
                return hit;
            }
            return null;
        }

        /// <summary>
        /// Gets the search display phrase to use in the SearchModel when searching in the Search view
        /// </summary>
        /// <param name="content">The html document to find the phrase in</param>
        /// <param name="position">The position of the phrase in the document</param>
        /// <returns></returns>
        private string getPhrase(HtmlDocument content, Tuple<int,int,int> position)
        {
            HtmlNode match = null;
            Parser.CheckNode(content.DocumentNode, position.Item1, position.Item2, ref match);
            if (match != null)
            {
                int snippetStartIndex = Math.Max(position.Item3 - (SNIPPET_SIZE / 2), 0);
                int snippetLength = Math.Min(SNIPPET_SIZE, match.InnerText.Length - snippetStartIndex);
                return match.InnerText.Substring(snippetStartIndex, snippetLength);
            }
            else return null;
        }

		public static string CreateMenuFromJSONFile()
		{
			string jsonFile = GetTextFromBlob(MENU_LINK_TREE_MANUAL);

			MenuModel menuObj = JsonConvert.DeserializeObject<MenuModel>(jsonFile);
			
			return HtmlGenerator.CreateHTMLMenu(menuObj);
		}

        /// <summary>
        /// Saves the main menu to blob after user clicks save in the "Edit Main Menu" modal.
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        [HttpPost]
        public string SaveMainMenu(string text)
        {
			try
			{
				HtmlDocument newMainMenu = new HtmlDocument();
				newMainMenu.LoadHtml(Server.UrlDecode(text));

				HtmlDocument oldMainMenu = new HtmlDocument();
				oldMainMenu.LoadHtml(GetTextFromBlob("Manual£Link_Tree"));

				HtmlNodeCollection newMenuItems = newMainMenu.DocumentNode.SelectNodes("//*[contains(@class,'editableMenuItem')]");
				HtmlNodeCollection totallyNewMenuItems = newMainMenu.DocumentNode.SelectNodes("//*[contains(@class,'newMenuItemInput')]");
				HtmlNodeCollection oldMenuItems = oldMainMenu.DocumentNode.SelectNodes("//a");

				int j = 0;

				for (int i = 0; i < newMenuItems.Count; i++)
				{
					if (oldMenuItems.ElementAt(i).InnerHtml != newMenuItems.ElementAt(j).Attributes["value"].Value)
					{
						var par = oldMenuItems.ElementAt(i).ParentNode;
						par.RemoveAllChildren();
						par.Remove();
						continue;
					}

					oldMenuItems.ElementAt(i).InnerHtml = newMenuItems.ElementAt(j).Attributes["value"].Value;
					j++;
				}

				foreach (var item in totallyNewMenuItems)
				{
					if (item.Attributes["value"] != null && item.Attributes["value"].Value != "")
					{
						string innerHtml = WikiBlob.DeSanitize(WikiBlob.SanitizeLite(Server.HtmlDecode(item.Attributes["value"].Value)));
						if (string.IsNullOrWhiteSpace(innerHtml))
							continue;

						string link = WikiBlob.Combine(@"/Wiki/Page/Manual", WikiBlob.SanitizeV2(item.Id), WikiBlob.SanitizeV2(item.Attributes["value"].Value));

						HtmlNodeCollection placementInUL = oldMainMenu.DocumentNode.SelectNodes("//*[contains(@class,'list-group-item')]");
						foreach (var listItem in placementInUL)
						{
							if (listItem.Descendants("a").FirstOrDefault().InnerText == item.Id)
							{

								HtmlNode ulNode = listItem.Descendants("ul").FirstOrDefault();
								HtmlNode newNode = ulNode.Descendants("li").LastOrDefault().Clone();
								newNode.Descendants("a").FirstOrDefault().Attributes["href"].Value = link;
								newNode.Descendants("a").FirstOrDefault().InnerHtml = innerHtml;
								listItem.Descendants("ul").FirstOrDefault().ChildNodes.Append(newNode);
							}
						}
					}
				}
				sortMainMenu(oldMainMenu.DocumentNode.SelectNodes("//*[contains(@class,'projectInternalLinks')]"));
				dal.AddManualPageToBlob("Manual£Link_Tree", oldMainMenu.DocumentNode.OuterHtml, User.Identity.Name, Request.UserHostAddress);

				return "success";
			}
			catch (Exception e)
			{
				return "failure";
			}

        }

        /// <summary>
        /// Sorts the mian menu alphabetically. 
        /// </summary>
        /// <param name="menuItems">Soreted main menu html</param>
        private void sortMainMenu(HtmlNodeCollection menuItems)
        {
            foreach (var item in menuItems)
            {
                List<HtmlNode> temp = item.ChildNodes.ToList();
                for (int i = 0; i < temp.Count; i++)
                {
                    if (temp.ElementAt(i).Name == "#text") temp.RemoveAt(i);  
                }

                temp.Sort(new SortHtmlNodeByInnerText());

                item.InnerHtml = "";

                foreach (var node in temp)
                {
                    TagBuilder liTag = new TagBuilder("li");
                    liTag.InnerHtml = node.InnerHtml;
                    item.InnerHtml += liTag;
                }
            }
        }

        /// <summary>
        /// Creates the index view and sets the values of the html-files to get from the blob in a ViewBab
        /// </summary>
        /// <returns>The index view</returns>
        public ActionResult Index()
        {
            string manualThumbnailContent = GetTextFromBlob(MANUAL_INDEX_BLOB_ADR);
            string autoContent = GetTextFromBlob(AUTOGEN_INDEX_NAME);

            Dictionary<string, string> indexItems = new Dictionary<string, string>();
            indexItems["Manual_Content"] = manualThumbnailContent;
            indexItems["Overview_Integration"] = autoContent; //TODO not used
            indexItems["Manual_Blob_Adr"] = MANUAL_INDEX_BLOB_ADR;
            indexItems["Thumbnails"] = GetTextFromBlob(THUMBNAILS);

            string newestPages = WebApiCache.Get("Latest_Blobs") as string;
            if (newestPages == null)
            {
                newestPages = GetNewestPages(8);
                Cache("Latest_Blobs", newestPages, 1000*60*5);
            }

            indexItems["Latest_Blobs"] = newestPages;

            return View(indexItems);
        }

        /// <summary>
        /// Builds the true HTML representation of a thumbnail for the index page based on the input values.
        /// </summary>
        /// <param name="imgLink">Link to the image file to use as a thumb image</param>
        /// <param name="titleLink">The link you are redirected too when clicking the thumb title</param>
        /// <param name="title">The text of the title itself</param>
        /// <param name="text">The body text of the thumb</param>
        /// <param name="id">The HTML id of the upper column element for the current thumb</param>
        /// <returns></returns>
        [HttpPost]
        public string EditThumbnail(string imgLink, string titleLink, string title, string text, string id)
        {
            if (!User.CanEdit("Manual£Index"))
                return "Failure";

            string newThumb = generator.CreateEditThumbnail(imgLink, title, Server.UrlDecode(text), titleLink);

            HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(GetTextFromBlob(THUMBNAILS));

            HtmlNodeCollection headers = doc.DocumentNode.SelectNodes("//div");

            foreach (var item in headers)
            {
                if(item.Id == id)
                {
                    item.InnerHtml = newThumb;
                }
            }

            dal.AddManualPageToBlob(THUMBNAILS, doc.DocumentNode.OuterHtml, User.Identity.Name, Request.UserHostAddress);

            return newThumb;
        }

        /// <summary>
        /// Loads the HTML representation of the thumbnails and removes the thumb with the current id.
        /// </summary>
        /// <param name="id">The id of the upper column element for the thumb to remove</param>
        /// <returns></returns>
        [HttpPost]
        public string RemoveThumbnail(string id)
        {
            HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(GetTextFromBlob(THUMBNAILS));

            HtmlNodeCollection headers = doc.DocumentNode.SelectNodes("//div");

            foreach (var item in headers)
            {
                if (item.Id == id)
                {
                    item.Remove();
                }
            }

            dal.AddManualPageToBlob(THUMBNAILS, doc.DocumentNode.OuterHtml, User.Identity.Name, Request.UserHostAddress);

            return "Success";
        }

        /// <summary>
        /// Builds the HTML that gives the user the ability to edit a thumbnail. The HTML returned from this method is switched with 
        /// the HTML of the thumbnail element the user wishes to edit.
        /// </summary>
        /// <param name="imgLink">Link to the image file to use as a thumb image</param>
        /// <param name="titleLink">The link you are redirected too when clicking the thumb title</param>
        /// <param name="title">The text of the title itself</param>
        /// <param name="text">The body text of the thumb</param>
        /// <returns></returns>
        [HttpPost]
        public string GetEditThumbnailHTML(string imgLink, string titleLink, string title, string text)
        {
            return generator.GetEditThumbnailHTML(imgLink, titleLink, title, text);
        }

        /// <summary>
        /// Builds the HTML that gives the user the ability to create a new thumbnail. The HTML returned from this method is appended to the last cell of
        /// the thumbnail grid and is replaced by the new thumb when the user clicks save and the page reloads.
        /// Uses <see cref="GetEditThumbnailHTML"/> generate all the HTML except the top column level, which is only needed when creating new thumbs.
        /// </summary>
        /// <param name="imgLink">Link to the image file to use as a thumb image</param>
        /// <param name="titleLink">The link you are redirected too when clicking the thumb title</param>
        /// <param name="title">The text of the title itself</param>
        /// <param name="text">The body text of the thumb</param>
        /// <returns>Edit box HTML for a thumbnail</returns>
        public string GetCreateThumbnailHTML(string imgLink, string title, string text, string titleLink = "")
        {
            return generator.GetCreateThumbnailHTML(imgLink, title, text, titleLink);
        }

        /// <summary>
        /// Adds a thumnail to the <see cref="THUMBNAILS"/> blob using the <see cref="HtmlGenerator.CreateThumbnail"/> method to generate the new thumbnail.
        /// </summary>
        /// <param name="imgLink">Link to the image file to use as a thumb image</param>
        /// <param name="titleLink">The link you are redirected too when clicking the thumb title</param>
        /// <param name="title">The text of the title itself</param>
        /// <param name="text">The body text of the thumb</param>
        /// <returns>"Succsess" if success</returns>
        public string AddThumbnail(string imgLink, string title, string text, string titleLink = "")
        {
            string content = generator.CreateThumbnail(imgLink, title, Server.UrlDecode(text), titleLink);

            string doc = GetTextFromBlob(THUMBNAILS);
            doc += content;

            dal.AddManualPageToBlob(THUMBNAILS, doc, User.Identity.Name, Request.UserHostAddress);

            return "success";
        }

        /// <summary>
        /// Preliminary caching function. Temporary disabled and not used. 
        /// </summary>
        /// <param name="key"></param>
        /// <param name="obj"></param>
        private static void Cache(String key, Object obj, double milliseconds = 60000)
        {
            DateTime validTo = DateTime.Now.AddMilliseconds(milliseconds);
            DateTimeOffset cacheExpiry = new DateTimeOffset(validTo);
            WebApiCache.Add(key, obj, cacheExpiry);
        }

        /// <summary>
        /// Uploads an image to blob after the user browses to an image to upload in the Edit view. 
        /// </summary>
        /// <param name="sourceFile">The name of the file you are editing and which you want the image associated with.</param>
        /// <param name="file">The actual image file selected</param>
        /// <param name="imageWidth">User inputed image width</param>
        /// <param name="pageId">Id of the page to append to name of image for a bigger image name pool</param>
        /// <returns>Html used for displaying the uploaded image</returns>
        public string UploadImageToBlob(string sourceFile, HttpPostedFileBase file, string imageWidth, string pageId)
        {
            string blobKey = "";

            if (String.IsNullOrWhiteSpace(imageWidth))
                imageWidth = "300";

            // Verify that the user selected a file
            if (file != null && file.ContentLength > 0)
            {
                blobKey = WikiBlob.Combine("Image", WikiBlob.Sanitize(pageId), WikiBlob.Sanitize(file.FileName));

                azureStorage.SetBlobContentFromStream(blobKey, file.InputStream);
            }
            return "<img width=\"" + imageWidth + "px\" src=\"/Images/UploadedImages/" + blobKey + "\"></img>";
        }

        /// <summary>
        /// Uploads a file to blob after the user browses to a file to upload in the Edit view. 
        /// </summary>
        /// <param name="file">The actual file selected</param>
        /// <param name="pageId">Id of the page to append to name of file for a bigger file name pool</param>
        /// <returns>Url to uploaded file</returns>
        public string UploadFileToBlob(HttpPostedFileBase file, string pageId)
        {
            string blobKey = null;

            // Verify that the user selected a file
            if (file != null && file.ContentLength > 0)
            {
                blobKey = WikiBlob.Combine("File", WikiBlob.SanitizeV2(pageId), WikiBlob.SanitizeV2(file.FileName));
                azureStorage.SetBlobContentFromStream(blobKey, file.InputStream);
            }
            return "/File/UploadedFile/" + blobKey;
        }

        /// <summary>
        /// Uses <see cref="HtmlGenerator"/> to create a  table over all TFS changelogs in the blob.
        /// </summary>
        /// <returns>View containing the table</returns>
        public ActionResult AllTFSLogs()
        {
            List<KeyValuePair<string, string>> files = new List<KeyValuePair<string, string>>();
            Dictionary<string, string> model = new Dictionary<string, string>();
            foreach (var str in azureStorage.GetBlobList("TFS£ReleaseNotes£"))
            {
                string decoded = HttpUtility.UrlDecode(str);

                string[] sections = decoded.Split('£');

                files.Add(new KeyValuePair<string, string>(sections.Last(), decoded));
            }

            files.Sort(new SortListKeyvaluePair());
            files.Reverse();

            model.Add("TFSLogs", generator.CreateTfsLogTable(files));
            return View(model);
        }

        /// <summary>
        /// Uses <see cref="HtmlGenerator"/> to create a  table over all TFS changelogs in the blob.
        /// </summary>
        /// <returns>View containing the table</returns>
        [HttpGet]
        public ActionResult GetCustomBlobs()
        {
            Dictionary<string, string> model = new Dictionary<string, string>();
            List<object> blobList = new List<object>();

            AzureBlobStorage highestEnv = environmentConnections["Production"];

            foreach (var str in highestEnv.GetBlobList("Custom£"))
            {
                object customRow = new
                {
                    Name = WikiBlob.GetFriendlyName(str, true),
                    Link = WikiBlob.GetAsWikiLink(str, true),
                    EmbedText = "[%" + Server.UrlDecode(str) + "%]"
                };
                blobList.Add(customRow);
            }

            model.Add("Manual_Content", blobList.ToHtmlTable());
            return View("PageCustom", model);
        }

        /// <summary>
        /// Serves an image stored in a blob to the site as a stream to be loaded into an img tag.
        /// </summary>
        /// <param name="id">Blob key to the image</param>
        /// <param name="type">Inconsequential for now, is used to distinguish images in the url, can be used in the future</param>
        /// <returns></returns>
        [Route("Images/{type}/{id}")]
        public async Task<ActionResult> CreateImage(string id, string type)
        {
			CloudBlockBlob blob = null;

			if(type == UPLOADED_IMAGES)
			{
				blob = azureStorage.Container.GetBlockBlobReference(Server.UrlDecode(id));
			}
			else
			{
				string env = type.SplitSimple("_").Last();

				blob = environmentConnections.GetAt(env, azureStorage).Container.GetBlockBlobReference(Server.UrlDecode(id));
			}

            if (!await blob.ExistsAsync()) return HttpNotFound();

            using (var ms = new MemoryStream())
            {
                // Download as stream
                await blob.DownloadToStreamAsync(ms);

                var img = new WebImage(ms);

                img.Write();
                return new EmptyResult();
            }
        }

        [Route("File/{type}/{id}")]
        public async Task<ActionResult> RawFile(string id, string type)
        {
            String allBlobEnvironments = null;
            String highestEnvironmentName = null;

            var primaryEnvironment = GetHighestBlobEnvironment(id, ref allBlobEnvironments, ref highestEnvironmentName);
            var blob = primaryEnvironment.Container.GetBlockBlobReference(Server.UrlDecode(id));

            if (!await blob.ExistsAsync()) return HttpNotFound();

            var stream = new MemoryStream();
            await blob.DownloadToStreamAsync(stream);
            stream.Seek(0, SeekOrigin.Begin);

            String contentType = WikiBlob.GetBlobMimeType(id, blob.Properties?.ContentType ?? MediaTypeNames.Application.Octet);
            return File(stream, contentType, WikiBlob.AsFileName(id));
        }

		[Route("Wiki/GetFile/{id}/{env?}")]

		public string GetFile(string id, string env = null)
        {
			if (string.IsNullOrEmpty(env))
				return azureStorage.GetBlobContentAsString(id);
			else
			{
				string file = environmentConnections.GetAt(env, azureStorage).GetBlobContentAsString(id);
				return file;
			}
			
        }

        public string UpdateIndexThumbs(string data)
        {
			
			dal.AddManualPageToBlob(THUMBNAILS, Server.UrlDecode(data), User.Identity.Name, Request.UserHostAddress);
            return "Success";
        }

        /// <summary>
        /// Gets the contents of a file from blob store. As these are usually html files this input is parsed as HTML raw in the view. 
        /// </summary>
        /// <param name="pageName">The blob key for the file</param>
        /// <returns></returns>
        public static string GetTextFromBlob(string pageName)
        {
            string content = WebApiCache.Get(pageName) as string;

            if (content == null)
            {
                content = azureStorage.GetBlobContentAsString(pageName);
                //Cache(pageName, content);
            }
            return content;
        }

        public void AddPageNav(String content, Dictionary<string, string> viewItems)
        {
            if (!String.IsNullOrWhiteSpace(content))
            {
                String pageNav = generator.CreatePageNav(content);
                if(!String.IsNullOrWhiteSpace(pageNav))
                    viewItems.Add("pageNav", pageNav);
            }
        }

        /// <summary>
        /// Gets all versions of a page. Used displying all versions of a page in the History View.
        /// </summary>
        /// <param name="id">The blob to find all versions of</param>
        /// <returns></returns>
        private List<AuditTrailModel> GetAllVersions(string id)
        {
            IEnumerable<AuditTrailModel> audits = azureStorage.GetAuditEntries(AuditTableName, AzureBlobStorage.TABLE_STORE_AUDIT_PARTITION_ID, id);
            return audits.OrderByDescending(x => x.Version).ToList();
        }

        /// <summary>
        /// Creates the History View with all versions of a single page
        /// </summary>
        /// <param name="id">The key to the blob to display the versions of</param>
        /// <returns>The history view</returns>
        public ActionResult History(string id)
        {
            return View(GetAllVersions(id));
        }

        /// <summary>
        /// Used by all Views containing an auto-generated part to switch to another environments documentation. Called by Javascript on click from the view.
        /// </summary>
        /// <param name="environmentName">The name of the environment to switch to</param>
        /// <param name="pageID">The id of the blob containing the auto-content for the specified environment</param>
        /// <returns>The new auto-content as html formatted string</returns>
        [Route("Wiki/EnvironmentPage/{environmentName}/{pageID}")]
        public string EnvironmentPage(string environmentName, string pageID)
        {
            try
            {
                string page = environmentConnections[environmentName].GetBlobContentAsString(pageID);
                return CleanJSFromHTML(page);
            }
            catch (Exception)
            {                
                return "failure";
            }            
        }

        /// <summary>
        /// Used by all Views containing an auto-generated part to switch to another environments documentation. Called by Javascript on click from the view.
        /// </summary>
        /// <param name="environmentName">The name of the environment to switch to</param>
        /// <param name="pageID">The id of the blob containing the auto-content for the specified environment</param>
        /// <returns>The new auto-content as html formatted string</returns>
        [Route("Wiki/GetBlobContent/{environmentName}/{pageID}")]
        public JsonResult GetBlobContent(string environmentName, string pageID)
        {
            string page = environmentConnections[environmentName].GetBlobContentAsString(pageID);
            return Json(new { content = CleanJSFromHTML(page), pageId=pageID }, JsonRequestBehavior.AllowGet);
        }

        private AzureBlobStorage GetHighestBlobEnvironment(String blobName, ref String allBlobEnvironments, ref String highestEnvName)
        {
            AzureBlobStorage highestEnv = azureStorage;
            foreach (var item in environmentConnections)
            {
                if (item.Value.GetBlobETag(blobName) != null)
                {
                    allBlobEnvironments += item.Key + "|";
                    highestEnv = item.Value;
                    highestEnvName = item.Key;
                }
            }
            return highestEnv;
        }

        /// <summary>
        /// Method used to render all documentation that require a manual part and an auto-genrated part. Uses a set of if-else statements to 
        /// decide which paramaters to send to each view, and which view to use. 
        /// </summary>
        /// <param name="id">The blob-key for the page to be generated.</param>
        /// <returns></returns>  
        [Route("Wiki/Page/{id}/{position?}/{searchText?}")]
        public ActionResult Page(string id, string position, string searchText)
        {
            Dictionary<String, String> viewItems = new Dictionary<string, string>();
            AzureBlobStorage highestEnvironment = null;
            string[] splitstring = id.Split('£');            
            string autoContent = null;
            string autoCode = null;
            string autoOverview = null;
            string manualContent = null;
            string allBlobEnvironments = null;
            string highestEnvName = null;
            string view = "Page";
            string pageID = null;

            ViewBag.Page = id;
            ViewBag.searchText = searchText;

            if (WikiBlob.IsOldVersion(id) || WikiBlob.IsRegularManualPage(id, false) || WikiBlob.IsTemplate(id, false))
            {
                manualContent = GetTextFromBlob(id);
                ViewBag.Title = splitstring.Last().Replace('€', '.');
                pageID = splitstring.Last();
                viewItems.Add("Manual_Blob_Adr", id);
                view = "PageManual";
            }
            else
            {
                highestEnvironment = GetHighestBlobEnvironment(id, ref allBlobEnvironments, ref highestEnvName);
                manualContent = GetTextFromBlob(WikiBlob.GetManualName(id));
                autoContent = highestEnvironment.GetBlobContentAsString(id);
                pageID = WikiBlob.GetPartOfBlobName(id, 2, ref splitstring);

                ViewBag.Title = WikiBlob.DotDecode(pageID);
                viewItems.Add("PrimaryEnvironment", highestEnvName);
                viewItems.Add("Environments", allBlobEnvironments);
                viewItems.Add("Auto_Blob_Adr", id);
                viewItems.Add("Manual_Blob_Adr", WikiBlob.GetManualName(id));
                
                if (WikiBlob.IsIntegration(id, true))
                {
                    viewItems.Add("autoContent", autoContent);
                }
                else if (WikiBlob.IsTFS(id, true)) //Changesets 
                {
                    viewItems.Add("autoContent", autoContent);
                    view = "TFS";
                }
                else if (WikiBlob.IsApi(id, true)) //API
                {
                    view = "Swagger";
                }
                else if (WikiBlob.IsOrchestration(id, true))
                {
                    autoCode = highestEnvironment.GetBlobContentAsString(WikiBlob.GetCodeName(id));
                    autoOverview = highestEnvironment.GetBlobContentAsString(WikiBlob.GetOverviewName(id));
                    viewItems.Add("autoContent", autoContent);
                    viewItems.Add("autoCode", autoCode);
                    viewItems.Add("autoOverview", autoOverview);
                    view = "PageOrchestration";
                }
                else if (WikiBlob.IsSQL(id, true) || WikiBlob.IsSchema(id, true) || WikiBlob.IsMap(id, true)
                        || WikiBlob.IsPipeline(id, true) || WikiBlob.IsRecievePort(id, true) || WikiBlob.IsSendPort(id, true)
                        || WikiBlob.IsSandCastle(id, true) || WikiBlob.IsWebJob(id, true))
                {
                    ViewBag.Title = WikiBlob.GetFriendlyName(id);
                    pageID = WikiBlob.GetFriendlyName(splitstring.Last()); //splitstring[1] + ((splitstring.Length > 2) ? " - " + splitstring[2] : "");
                    viewItems.Add("autoContent", autoContent);
                }
                else if(WikiBlob.IsCustom(id, true))
                {
                    manualContent = highestEnvironment.GetBlobContentAsString(id);
                    ViewBag.Title = WikiBlob.GetFriendlyName(splitstring.Last());
                    pageID = WikiBlob.GetFriendlyName(splitstring.Last());
                    viewItems["Manual_Blob_Adr"] = id;
                    view = "PageManual";
                }
                else // This shouldn't happen
                {
                    manualContent = GetTextFromBlob(id);
                    ViewBag.Title = WikiBlob.GetFriendlyName(splitstring.Last());
                    pageID = WikiBlob.GetFriendlyName(splitstring.Last());
                    viewItems["Manual_Blob_Adr"] = id;
                    view = "PageManual";
                }
            }

            CalculateAndGetPhrase(manualContent, autoContent, position);
            viewItems.Add("pageID", pageID);
            viewItems.Add("Manual_Content", manualContent);

            AddPageNav(manualContent + autoContent + autoCode + autoOverview, viewItems);
            return View(view, viewItems);
        }

        /// <summary>
        /// Legacy method implemented as a quick fix. Is replaced by Page/{SwaggerPageBlobKey}.
        /// </summary>
        /// <returns>Redirects to <see cref="Page"/></returns>
        public ActionResult Swagger()
        {
            return RedirectToAction("Page", "Wiki", new { id = "Api£Mdm€Api" });
        }

        /// <summary>
        /// Used to get a phrase for a serch result when using the search view. Decides if a phrase is located in the manual or auto part of the page.
        /// </summary>
        /// <param name="manualContent">The manual content to search</param>
        /// <param name="autoContent">The auto content to search</param>
        /// <param name="position">The position of the phrase in the content</param>
        private void CalculateAndGetPhrase(string manualContent, string autoContent, string position)
        {
            if (position != null)
            {
                string phrase = "";
                if (manualContent != null)
                {
                    HtmlDocument doc = new HtmlDocument();
                    doc.LoadHtml(manualContent);
                    string[] pos = position.Split('£');

                    Tuple<int, int, int> posAsTup = new Tuple<int, int, int>(Int32.Parse(pos[0]), Int32.Parse(pos[1]), Int32.Parse(pos[2]));

                    phrase = getPhrase(doc, posAsTup);
                }
                else if (autoContent != null)
                {
                    HtmlDocument doc = new HtmlDocument();
                    doc.LoadHtml(autoContent);
                    string[] pos = position.Split('£');

                    Tuple<int, int, int> posAsTup = new Tuple<int, int, int>(Int32.Parse(pos[0]), Int32.Parse(pos[1]), Int32.Parse(pos[2]));

                    phrase = getPhrase(doc, posAsTup);
                }

                ViewBag.Phrase = phrase;
            }
        }


        /// <summary>
        /// Renders the edit page for editing the manual part of a page.
        /// </summary>
        /// <param name="id">The blob key of the page to edit.</param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Edit(string id)
        {
            if (!User.CanEdit(id))
                return RedirectToAction("Index");

            Dictionary<string, string> viewItems = new Dictionary<string, string>();

            string manualContent = GetTextFromBlob(id);

            if (manualContent == null)
            {
                if(id.StartsWith("Manual£Services£", StringComparison.OrdinalIgnoreCase) && id.LastIndexOf("£") == 14)
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_SERVICE));
                else if(id.StartsWith("Manual£Projects£", StringComparison.OrdinalIgnoreCase) && id.LastIndexOf("£") == 14)
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_PROJECT));
                else if(id.StartsWith("integration£", StringComparison.OrdinalIgnoreCase))
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_INTEGRATION));
                else if(id.StartsWith("orchestration£", StringComparison.OrdinalIgnoreCase))
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_ORCHESTRATION));
                else if (id.StartsWith("Manual£Deliveries£", StringComparison.OrdinalIgnoreCase))
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_DELIVERIES));
                else if (id.StartsWith("Manual£External Services£", StringComparison.OrdinalIgnoreCase))
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_EXTERNAL));
                else
                    viewItems.Add("Manual_Content", GetTextFromBlob(TEMPLATE_GENERAL));
            }
            else
            {
                manualContent = AddClassToPre(manualContent);
                viewItems.Add("Manual_Content", manualContent);
            }
            
            viewItems.Add("Manual_Blob_Adr", id);
            viewItems.Add("Guidelines", azureStorage.GetBlobContentAsString(GUIDELINES)); 
            viewItems.Add("lastPulledETag", azureStorage.GetBlobETag(id));
            
            return View(viewItems);
        }

        /// <summary>
        /// Adds a general class to Pre tags uses by Higlighter.js to highligt code. This is a fix to still get higlighting on all code even if user doesent specify code language.
        /// </summary>
        /// <param name="content">The pre tag to add class to</param>
        /// <returns>The pre tag with the class</returns>
        private string AddClassToPre(string content)
        {
            HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(content);

            var preNodes = doc.DocumentNode.SelectNodes("//pre");

            if (preNodes != null)
            {
                foreach (var node in preNodes)
                {
                    node.Attributes.Add("class", "language-markup");
                }

                content = doc.DocumentNode.OuterHtml;
            }

            return content;
        }

        /// <summary>
        /// Rollbacks a page to the speciefied version. 
        /// </summary>
        /// <param name="id">The key to the blob to rollback to</param>
        /// <returns>Redirects to Page with the rollbacked page id as a paramater</returns>
        public ActionResult Rollback(string id)
        {
            Regex r = new Regex(@"(.*(£Manual(£Version(\d+))))$");
            Match m = r.Match(id);
            Regex r2 = new Regex(@"(.*(£Version(\d+)))$");
            Match m2 = r2.Match(id);
            string redirectID = "";
            if (m.Success)
            {
                redirectID = id.Replace(m.Groups[2].ToString(), "");
                dal.AddManualPageToBlob(id.Replace(m.Groups[3].ToString(), ""), azureStorage.GetBlobContentAsString(id), User.Identity.Name, Request.UserHostAddress);
            }
            else if (id.StartsWith("Manual") && m2.Success)
            {
                redirectID = id.Replace(m2.Groups[2].ToString(), "");
                dal.AddManualPageToBlob(redirectID, azureStorage.GetBlobContentAsString(id), User.Identity.Name, Request.UserHostAddress);
            }
            else
            {
                throw new FormatException("No version found for rollback page. This is not concurrent with system specifications.");
            }
            return RedirectToAction("Page", new { id = redirectID });
        }

        /// <summary>
        /// Cleans unwanted content from html inputted by the user. Also cleans code tags for 'gt' and 'lt' character, transforming them to their html variant for correct display.
        /// </summary>
        /// <param name="content">The HTML to clean</param>
        /// <returns>Cleaned HTML</returns>
        private string CleanJSFromHTML(string content)
        {
            HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(content);

            var jsNodes = doc.DocumentNode.SelectNodes("//script");

            //Clean JS
            if (jsNodes != null)
            {
                foreach (var node in jsNodes)
                    node.ParentNode.RemoveChild(node);

                content = doc.DocumentNode.OuterHtml;
                doc.LoadHtml(content);
            }

            var codeNodes = doc.DocumentNode.SelectNodes("//code");
            
            //Clean < and > in Code nodes
            if (codeNodes != null)
            {
                foreach (var node in codeNodes)
                {
                    node.InnerHtml = node.InnerHtml.Replace("<", "&#60;").Replace(">", "&#62;");
                }

                content = doc.DocumentNode.OuterHtml;
            }

            var preNodes = doc.DocumentNode.SelectNodes("//pre");
            //Clean < and > in Code nodes
            if (preNodes != null)
            {
                foreach (var node in preNodes)
                {
                    if (node.Attributes.Contains("class"))
                        node.Attributes["class"].Remove();
                }

                content = doc.DocumentNode.OuterHtml;
            }

            return content;
        }

        /// <summary>
        /// Post method for saving the edited html of the manual part of the page. 
        /// </summary>
        /// <param name="col">The content of the manual page-edit</param>
        /// <returns>Redirects to the virew of the edited page.</returns>
        [HttpPost, ValidateInput(false)]
        public JsonResult Edit(string content, string lastPulledETag, string id)
        {
            string decodedContent = content;
            string decodedLastPulledETag = Server.HtmlDecode(lastPulledETag);
            string decodedId = Server.HtmlDecode(id);
            var result = new { decodedId = decodedId, newEtag = lastPulledETag, status = "failure" };

            if (!User.CanEdit(decodedId))
            {
                return Json(result, JsonRequestBehavior.DenyGet);
            }

            string currentETag = azureStorage.GetBlobETag(decodedId);

            if (currentETag != null && currentETag != decodedLastPulledETag)
                return Json(result, JsonRequestBehavior.DenyGet);

            //Need to remove Javascript from Html for security purposes
            decodedContent = CleanJSFromHTML(decodedContent);

            dal.AddManualPageToBlob(decodedId, decodedContent, User.Identity.Name, Request.UserHostAddress);

            if (decodedId.EndsWith("£Manual"))
            {
                decodedId = decodedId.Remove(decodedId.Length - "£Manual".Length);
            }

            result = new { decodedId = decodedId, newEtag = azureStorage.GetBlobETag(decodedId), status= "success" };
            return Json(result, JsonRequestBehavior.DenyGet);
        }

        /// <summary>
        /// Fetches two pages from blob storage and forwards them
        /// to a view that compares their content.
        /// </summary>
        /// <param name="page1">Address to page 1</param>
        /// <param name="page2">Address to page 2</param>
        /// <returns>A view comparing two pages</returns>
        [Route("Wiki/Diff/{page1}/{page2}")]
        public ActionResult Diff(string page1, string page2)
        {
            String blob1 = GetTextFromBlob(page1);
            String blob2 = GetTextFromBlob(page2);
            blob1 = (blob1 != null) ? blob1.JSEncode() : "Page not found";
            blob2 = (blob2 != null) ? blob2.JSEncode() : "Page not found";
            return View(new Tuple<string, string>(blob1, blob2));
        }

        [HttpPost]
        public string AddorUpdateCookie(string value, string cookieName)
        {
            HttpCookie myCookie = Request.Cookies[cookieName];
            try
            {
                if (myCookie == null)
                {
                    myCookie = new HttpCookie(cookieName);
                    myCookie.Value = value;
                    myCookie.Expires = DateTime.Now.AddYears(50); // For a cookie to effectively never expire
                    Response.Cookies.Add(myCookie);
                }
                else
                {
                    myCookie.Value = value;
                    myCookie.Expires = DateTime.Now.AddYears(50);
                    Response.SetCookie(myCookie);
                }
            }
            catch (Exception e)
            {
                return e.Message;
            }
            return "success";
        }

        [HttpPost]
        public string AddOrUpdateSettingsCookie(string preference, string value)
        {
            HttpCookie settingsCookie = Request.Cookies["SettingsCookie"];

            try
            {
                if (settingsCookie == null)
                {
                    settingsCookie = new HttpCookie("SettingsCookie");
                    settingsCookie.Values.Add(preference, value);
                    settingsCookie.Expires = DateTime.Now.AddYears(50);
                    Response.Cookies.Add(settingsCookie);
                }
                else
                {
                    settingsCookie.Values.Set(preference, value);
                    settingsCookie.Expires = DateTime.Now.AddYears(50);
                    Response.SetCookie(settingsCookie);
                }
            }
            catch (Exception e)
            {
                return e.Message;
            }
            return "success";
        }

        /// <summary>
        /// Shows the user their profile page,
        /// with a list of their edits.
        /// </summary>
        /// <returns>A profile page view</returns>
        public ActionResult UserProfile(String user)
        {
            if (String.IsNullOrEmpty(user))
                user = User.Identity.Name;

            IEnumerable<AuditTrailModel> edits = azureStorage.GetAuditEntriesByUser(AuditTableName, user);

            foreach (var edit in edits)
            {
                edit.Blob = Regex.Replace(edit.Blob, @"(.+)_\d{14}.*", delegate(Match match)
                                         {
                                            return match.Groups[1].Value.ToString();
                                         });
            }

            return View(edits.OrderByDescending(a => a.Time)
                             .GroupBy(b => b.Blob)
                             .Select(c => c.First()).ToList());
        }
    }
}
